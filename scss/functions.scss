@use 'sass:map';
@use 'sass:math';

// Color Adjustment Function
@function adjust-color($color-name, $percentage: null, $desaturate: false) {
  $color: map-get($theme-colors, $color-name);
  @if type-of($color) != 'color' {
    @warn "Invalid color: #{$color}";
    @return null;
  }

  @if $desaturate == true {
    @return desaturate($color, 100%);
  }

  @if $percentage == null or $percentage == 0% {
    @return $color;
  }

  @if $percentage > 0% {
    @return lighten($color, $percentage);
  } @else {
    @return darken($color, abs($percentage));
  }
}

// Generate Theme Color Variants Function
@function generate-theme-color-variants($base-colors) {
  $variants: ();
  @each $name, $color in $base-colors {
    $variants: map-merge($variants, (
      #{$name}-light: apply-color($name, 15%),
      #{$name}-dark: apply-color($name, -30%),
      #{$name}-muted: apply-color($name, null, true)
    ));
  }
  @return $variants;
}

// Grid Column Function
@function columns($size) {
  @if map-has-key($column-sizes, $size) {
    @return map-get($column-sizes, $size);
  } @else {
    @warn "Invalid grid size: #{$size}";
    @return null;
  }
}

// Generate Columns Function
@function generate-columns($total-columns) {
  $columns: ();
  @for $i from 1 through $total-columns {
    $columns: map-merge($columns, (col-#{$i}: calc(100% * #{$i} / $total-columns)));
  }
  @return $columns;
}

// Utility Size Function
@function container($size) {
  @if map-has-key($utility-sizes, $size) {
    @return map-get($utility-sizes, $size);
  } @else {
    @warn "Invalid utility size: #{$size}";
    @return null;
  }
}

// Generate Utility Sizes Function
@function generate-spacing-sizes($base, $scale, $steps) {
  $sizes: (none: 0);
  @for $i from 1 through $steps {
    $size: $base * $i; // Linear increment
    $sizes: map-merge($sizes, (spacing-#{$i}: $size));
  }
  @return $sizes;
}

// Spacing Function
@function spacing($size) {
  @if map-has-key($spacing-sizes, $size) {
    @return map-get($spacing-sizes, $size);
  } @else {
    @warn "Invalid spacing size: #{$size}";
    @return null;
  }
}

// Generate Spacing Sizes Function
@function generate-spacing-sizes($base, $scale, $steps) {
  $sizes: (none: 0);
  @for $i from 1 through $steps {
    $size: $base * math.pow($scale, $i - 1);
    $sizes: map-merge($sizes, (step-#{$i}: $size));
  }
  @return $sizes;
}

// Line Height Function
@function line-height($size) {
  @if map-has-key($line-heights, $size) {
    @return map-get($line-heights, $size);
  } @else {
    @warn "Invalid line-height size: #{$size}";
    @return null;
  }
}