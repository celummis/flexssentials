/* 
 * Flexssentials SCSS Framework
 * A simple and lightweight approach to styling essentials: colors, layout, and spacing
 */

// Import Sass modules
@use 'sass:map';
@use 'sass:color';
@use 'sass:math';

// Import reset stylesheet (can be removed if not needed)
@use 'reset';

// SCSS Maps - Single source of truth for all variables
// These are used internally for calculations and modifications

// Colors
$colors: (
  primary: #55B785,
  secondary: #808181,
  info: #0099FF,
  success: #30DF3E,
  warning: #FB8609,
  danger: #DF3030,
  text: #121212,
  grayscale: #000000
);

// Grid columns
$columns: (
  col-12: 100%,
  col-11: 91.6666666667%,
  col-10: 83.3333333333%,
  col-9: 75%,
  col-8: 66.6666666667%,
  col-7: 58.3333333333%,
  col-6: 50%,
  col-5: 41.6666666667%,
  col-4: 33.3333333333%,
  col-3: 25%,
  col-2: 16.6666666667%,
  col-1: 8.3333333333%
);

// Spacing
$spacing: (
  none: 0,
  xs: 0.25rem,
  sm: 0.5rem,
  md: 1rem,
  lg: 1.5rem,
  xl: 2rem,
  xxl: 3rem
);

// Utility sizes
$sizes: (
  w-100: 100%,
  w-95: 95%,
  w-90: 90%,
  w-85: 85%,
  w-80: 80%,
  w-75: 75%,
  w-70: 70%,
  w-65: 65%,
  w-60: 60%,
  w-55: 55%,
  w-50: 50%,
  w-45: 45%,
  w-40: 40%,
  w-35: 35%,
  w-30: 30%,
  w-25: 25%,
  w-20: 20%,
  w-15: 15%,
  w-10: 10%
);

// Font sizes
$font-sizes: (
  footnote: 0.75rem,
  caption: 0.85rem,
  label: 0.9rem,
  body: 1rem,
  heading-6: 1.25rem,
  heading-5: 1.5rem, 
  heading-4: 1.75rem,
  heading-3: 2rem,
  heading-2: 2.5rem,
  heading-1: 3rem
);

// Breakpoints
$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1400px
);

/*
 * CSS Variables
 * Define CSS custom properties for runtime theme customization
 * These can be modified at runtime with JavaScript for dynamic theming
 */
:root {
  // Theme Colors (automatically generated from $colors map)
  @each $name, $value in $colors {
    --#{$name}: #{$value};
  }

  // Grid Columns (automatically generated from $columns map)
  @each $name, $value in $columns {
    --#{$name}: #{$value};
  }

  // Spacing (automatically generated from $spacing map)
  @each $name, $value in $spacing {
    --#{$name}: #{$value};
  }
  
  // Utility Sizes (automatically generated from $sizes map)
  @each $name, $value in $sizes {
    --#{$name}: #{$value};
  }

  // Font sizes (automatically generated from $font-sizes map)
  @each $name, $value in $font-sizes {
    --#{$name}: #{$value};
  }

  // Breakpoints (automatically generated from $breakpoints map)
  @each $name, $value in $breakpoints {
    --break-#{$name}: #{$value};
  }
}

/*
 * Core Functions
 * These provide access to framework values and calculations
 */

/**
 * Retrieve grid column width
 * @param {string} $col - Column size key (col-1 through col-12)
 * @return {string} CSS variable for column width
 */
@function column($col) {
  @return var(--#{$col});
}

/**
 * Retrieve utility container size
 * @param {string} $size - Size key (w-10 through w-100)
 * @return {string} CSS variable for width
 */
@function container($size) {
  @return var(--#{$size});
}

/**
 * Retrieve spacing value
 * @param {string} $size - Spacing size key (xs, sm, md, lg, xl, xxl)
 * @return {string} CSS variable for spacing
 */
@function spacing($size) {
  @return var(--#{$size});
}

/**
 * Retrieve theme color as CSS variable
 * @param {string} $color-name - Color name (primary, secondary, etc.)
 * @return {string} CSS variable for color
 */
@function color($color-name) {
  @return var(--#{$color-name});
}

/**
 * Get or modify a theme color from SCSS color map
 * 
 * @param {string} $color-name - Color name from the colors map
 * @param {number} $percentage - Optional percentage to lighten/darken
 * @return {color} The original or modified color
 * 
 * Usage examples:
 *   color-value(primary)        // Returns the primary color as is
 *   color-value(primary, 20%)   // Returns the primary color lightened by 20%
 *   color-value(primary, -30%)  // Returns the primary color darkened by 30%
 */
@function color-value($color-name, $percentage: null) {
  $base-color: map.get($colors, $color-name);

  @if $base-color == null {
    @warn "Color '#{$color-name}' not found in the colors map.";
    @return null;
  }

  // Return the original color if no adjustment needed
  @if $percentage == null or $percentage == 0% {
    @return $base-color;
  }

  // Apply lightening or darkening based on percentage sign
  @if $percentage > 0% {
    @return color.lighten($base-color, $percentage);
  } @else {
    @return color.darken($base-color, math.abs($percentage));
  }
}

/**
 * Retrieve font size
 * @param {string} $size - Font size key (body, h1-h6, etc.)
 * @return {string} CSS variable for font size
 */
@function font($size) {
  @return var(--#{$size});
}

/**
 * Retrieve breakpoint
 * @param {string} $size - Breakpoint key (xs, sm, md, lg, xl)
 * @return {string} CSS variable for breakpoint
 */
@function breakpoint($size) {
  @return var(--break-#{$size});
}

/*
 * Core Mixins
 * These provide reusable styling patterns
 */

/**
 * Apply flexbox layout properties
 * @param {string} $direction - flex-direction property (row, column, etc.)
 * @param {string} $justify - justify-content property
 * @param {string} $items - align-items property
 * @param {string} $content - align-content property
 * @param {string} $wrap - flex-wrap property
 * @param {string} $gap - gap between flex items (uses spacing sizes)
 */
@mixin flexbox($direction: row, $justify: flex-start, $items: stretch, $content: normal, $wrap: nowrap, $gap: null) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $items;
  align-content: $content;
  flex-wrap: $wrap;
  @if $gap != null { gap: spacing($gap); }
}

/**
 * Apply font styling
 * @param {string} $size - Font size key
 * @param {string|number} $weight - Font weight
 * @param {string} $style - Font style
 * @param {string} $transform - Text transform property
 */
@mixin font-styles($size: body, $weight: normal, $style: normal, $transform: none) {
  font-size: font-size($size);
  font-weight: $weight;
  font-style: $style;
  text-transform: $transform;
}

/**
 * Apply responsive styles based on breakpoint
 * @param {string} $breakpoint - Breakpoint key (xs, sm, md, lg, xl)
 */
@mixin responsive($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}";
  }
}

/**
 * Apply spacing (margin or padding)
 * @param {string} $type - Spacing type (margin or padding)
 * @param {string} $top - Top spacing size
 * @param {string} $right - Right spacing size
 * @param {string} $bottom - Bottom spacing size
 * @param {string} $left - Left spacing size
 */
@mixin spacing($type: margin, $top: null, $right: null, $bottom: null, $left: null) {
  @if $top != null { #{$type}-top: spacing($top); }
  @if $right != null { #{$type}-right: spacing($right); }
  @if $bottom != null { #{$type}-bottom: spacing($bottom); }
  @if $left != null { #{$type}-left: spacing($left); }
}

/**
 * Shorthand for applying margin
 * @param {string} $top - Top margin size
 * @param {string} $right - Right margin size
 * @param {string} $bottom - Bottom margin size
 * @param {string} $left - Left margin size
 */
@mixin margin($top: null, $right: null, $bottom: null, $left: null) {
  @include spacing(margin, $top, $right, $bottom, $left);
}

/**
 * Shorthand for applying padding
 * @param {string} $top - Top padding size
 * @param {string} $right - Right padding size
 * @param {string} $bottom - Bottom padding size
 * @param {string} $left - Left padding size
 */
@mixin padding($top: null, $right: null, $bottom: null, $left: null) {
  @include spacing(padding, $top, $right, $bottom, $left);
}

